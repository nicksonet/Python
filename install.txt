# 1. Предварительная подготовка к установке Python 3.6
# установка необходимых пакетов
apt-get install -y make libsqlite3-dev build-essential libssl-dev zlib1g-dev libffi-dev python-dev python3-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev  libncursesw5-dev xz-utils tk-dev libffi-dev python-dev python3-dev

# 2. Ручная сборка Python3.6
wget https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz
tar xvf Python-3.6.0.tgz
cd Python-3.6.0
./configure --enable-optimizations --enable-loadable-sqlite-extensions 
make -j8
sudo make altinstall

# 3.1 Настройка pip
# возможно (и даже скорее всего) pip у Вас "окажется" в /usr/local/bin/pip3.6 , для запуска делаем симлинк
ln -s /usr/local/bin/pip3.6 /usr/local/bin/pip)

# 3.2 альтернативная установка pip/pip3 для Python3 (если в предыдущем пункте что-то пошло не так)
wget https://bootstrap.pypa.io/get-pip.py
sudo python3.6 get-pip.py #очень важный момент, тут мы определяем для какого python нам нужно собрать pip
pip --version             #вывод должен совпадать с используемой версией Python 3.6
pip install --upgrade setuptools
pip install --upgrade distribute
 
# 3.3 Установка Дополнительных модулей
# проверяем правильно ли установился pip
root@python:/home/python# pip --version
pip 9.0.1 from /usr/local/lib/python3.6/site-packages (python 3.6)
# cryptography - весьма важный модуль, без которого не сможем поставить необходимые для работы с сетевым оборудованием #пакеты
python3.6 -m pip install cryptography #чтобы наверняка

# 3.4 Установка и настройка виртуального окружения
pip install virtualenvwrapper # проверь, используешь ли ты нужную версию pip (pip --version)
#Затем в .bashrc необходимо добавить
VIRTUALENVWRAPPER_PYTHON='/usr/local/bin/python3.6' #переменная определяет нужную версию Python для виртуального окружения
export WORKON_HOME=~/venv
source /usr/local/bin/virtualenvwrapper.sh

#для выполнения скрипта, необходимо перезапустить/перечитать .bashrc
exec bash

#Создание виртуального окружения, в котором используется Python 3.6
mkvirtualenv --python=/usr/local/bin/python3.6 pyneng-py3 #проверьте, в некоторых системах путь до python может отличаться 

#установка ipython и необходимых модулей в виртуальном окружении 
#сперва перейдем в виртуальное окружение
workon  pyneng-py3
#запустим установку ipython
pip install ipython
#установка дополнительных пакетов 
wget https://raw.githubusercontent.com/natenka/My_Scripts/master/req.txt
pip install -r req.txt
#установка Ansible
pip install git+git://github.com/ansible/ansible.git@devel

###
# Дополнительный раздел по альтернативной установке Python 3.6, установке IDE & etc
#Установка Pycharm 
#Добавить в репозиторий.
# jessie backports
deb http://http.debian.net/debian jessie-backports main
sudo apt-get update
sudo apt-get install -t jessie-backports openjdk-8-jdk
#Затем скачиваем мажорную версию PyCharm и перейдя в каталог с архивом выполняем последовательность
tar xvzf pycharm-community*.tar.gz -C /tmp/
su -c "chown -R root:root /tmp/pycharm*"
su -c "mv /tmp/pycharm-community* /opt/pycharm-community"
su -c "ln -s /opt/pycharm-community/bin/pycharm.sh /usr/local/bin/pycharm"
su -c "ln -s /opt/pycharm-community/bin/inspect.sh /usr/local/bin/inspect"
#запуск из терминала
pycharm &

# !Смена дефолтной версии - не рекомендую, но мало ли
# С использованием alternatives
update-alternatives --list python
sudo update-alternatives --install /usr/bin/python3 python /usr/bin/python3.6 10
update-alternatives --config python
# С использованием символических ссылок
sudo ln -s /usr/bin/python3.6 /usr/local/bin/python
sudo ln -s /usr/bin/python3.6 /usr/local/bin/python3
sudo ln -s /usr/local/bin/pip /usr/local/bin/pip3
